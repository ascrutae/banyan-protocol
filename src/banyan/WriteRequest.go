// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package banyan

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// V1:
/// key schema:
///      traceid
///      starttime
///      endtime
///      segmentid
///      statement
///      serviceid
///      serviceinstanceid
///      endpointname
///      endpointid
///      latency
///      error
///      version
///      tags
///      spans
///
/// values:
///     xxx.xxx.xxx.1
///     1613526708000
///     1613526708001
///     xxx.xxx.xxx.2
///     xxxx
///     ASDF@#AD.1
///     192.168.0.1@localhost
///     SpringController/test
///     123
///     0.1
///     flase
///     1.0
///     [{"http.url", "http://localhost:8080/test"}, {"http.status", "200"}]
///     [0,1,0,....]
type WriteRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsWriteRequest(buf []byte, offset flatbuffers.UOffsetT) *WriteRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WriteRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWriteRequest(buf []byte, offset flatbuffers.UOffsetT) *WriteRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WriteRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WriteRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WriteRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WriteRequest) Keyschema(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WriteRequest) KeyschemaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WriteRequest) Values(obj *Value, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WriteRequest) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WriteRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WriteRequestAddKeyschema(builder *flatbuffers.Builder, keyschema flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keyschema), 0)
}
func WriteRequestStartKeyschemaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WriteRequestAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(values), 0)
}
func WriteRequestStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WriteRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
