// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package banyan

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldMapping struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldMapping(buf []byte, offset flatbuffers.UOffsetT) *FieldMapping {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldMapping{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFieldMapping(buf []byte, offset flatbuffers.UOffsetT) *FieldMapping {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldMapping{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FieldMapping) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldMapping) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldMapping) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldMapping) FieldvalueType() DataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return DataType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldMapping) MutateFieldvalueType(n DataType) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *FieldMapping) Fieldvalue(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func FieldMappingStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FieldMappingAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(filename), 0)
}
func FieldMappingAddFieldvalueType(builder *flatbuffers.Builder, fieldvalueType DataType) {
	builder.PrependByteSlot(1, byte(fieldvalueType), 0)
}
func FieldMappingAddFieldvalue(builder *flatbuffers.Builder, fieldvalue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fieldvalue), 0)
}
func FieldMappingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
