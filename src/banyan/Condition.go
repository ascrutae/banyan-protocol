// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package banyan

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///  expression: trace_id = 1 AND (endpointName match "product"  OR endpointName match "chart")
///  logical tree:
///                     AND
///   trace_id = 1                                          OR
///                     endpointName match "product"               endpointName match "chart"
type Condition struct {
	_tab flatbuffers.Table
}

func GetRootAsCondition(buf []byte, offset flatbuffers.UOffsetT) *Condition {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Condition{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCondition(buf []byte, offset flatbuffers.UOffsetT) *Condition {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Condition{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Condition) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Condition) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Condition) Logic() Logic {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Logic(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Condition) MutateLogic(n Logic) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Condition) Expression(obj *ConditionExpression) *ConditionExpression {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ConditionExpression)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Condition) Left(obj *Condition) *Condition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Condition)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Condition) Right(obj *Condition) *Condition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Condition)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ConditionStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConditionAddLogic(builder *flatbuffers.Builder, logic Logic) {
	builder.PrependInt8Slot(0, int8(logic), 0)
}
func ConditionAddExpression(builder *flatbuffers.Builder, expression flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(expression), 0)
}
func ConditionAddLeft(builder *flatbuffers.Builder, left flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(left), 0)
}
func ConditionAddRight(builder *flatbuffers.Builder, right flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(right), 0)
}
func ConditionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
